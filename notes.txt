////////// REACT 101, REACT COMPONENTS & PROPS, MANAGING STATE & EVENTS, RENDERING LISTS & STYLING COMPONENTS - WEEK 1 //////////




use "let" when you want to create a variable that is really variable

use "const" when you want to constant variable/value (never changes)

arrow functions solve the problem with the "this" keyword

when importing and exporting (modules) the export "default" keyword marks the default export of said file

use curly braces when importing items by their name {name} and not with the default keyword, use when you must import more than one thing

    import person from "./person.js"

    import {baseData, cleanData} from "./utility.js"

classes are blueprints for objects (JS objects in our case) a class has the "class" keyword, and they can have both properties and methods. Methods are functions attached to classes where properties are variable attached to classes

a class is instantiated with the "new" keyword, classes are a way of creating "contructor" functions

a property is added to a class by adding a "constructor()" the default function/method of a class

properties are set up with the "this" keyword. this.name = "Quinten"

    class Person {
        contructor() {
            this.name = "Quinten";
        }

        printMyName() {
            console.log(this.name);
        }
    }

    const person = new Person();
    person.printMyName();

the spread/rest operator is "..."

spread: is used to split up array elements OR object properties

rest: used to merge a list of function arguments into an array

string, numbers, and booleans are "primitive types" while objects and arrays are "reference types"

What is React? React or ReactJS is a free open source front end JavaScript library developed by Facebook for building user interfaces based on UI components, maintained by Meta and the community of companies and devs

How to create a new react app? npx create-react-app@latest project/folder name

What is JSX? JSX in React is an extension to the JavaScript language syntax that provides a way to write HTML in React. JSX stands for JavaScript XML and it makes it easier to write and add HTML in React

What is SPA's in React? SPA is a single-page-application, a web app implementation that loads only a single web document, then updates the body content of that single document via JavaScript

What is the virtual DOM? React uses virtual DOM to optimize the performance of our application. It provides a mechanism that compares two render trees to know exactly what has changed and only updates what is necessary on the actual DOM

React is an SPA language

App.js and Index.js are going to be our main files when starting/building a React App


Components are re-usuable building blocks in the UI of a page, they are a combination of HTML, CSS, & JS code that make up a page

You build individual components and tell React how to compose them together into the user interface

React allows you to create re-usuable and reactive components consisting of HTML and JS (little CSS)

React code is written in a "Declarative Way" you will define the desires target/end state and then it is Reacts job to figure out which parts of the website need to be added or removed etc

index.js is the first file that is executed when you visit the webpage on for example localhost:3000

Single Page Applications SPA's only have 1 HTML file which is what shows up on the screen at the end

App.js is our root component, meaning all other components will at some point come through the App.js. App.js is rendered directly onto our 1 HTML document

! A component is React is just a JavaScript function !

components and elements in JSX/React need to begin with an uppercase character 'ExpenseItem"

You can replace hard coded data in React/JSX using "{}"

Props or (Properties) are basically attributes for our components

the event handlers or "on" actions like "onClick" want a function passed as a value

when using a function inside an onClick you just point at the function and not call it with () at the end clickHandler() <-- is a no

the function "useState" is provided by the react library that allows us to define values as State where changes to these values should reflect in the component function being called again. useState is a react hook.

useState always returns an array with 2 elements, the first element is the current state value and the second element is a function for updating that

props can only be sent from direct parents to direct childs we cant skip over components

whenever you are using "two way binding" you are working with a controlled component 

.map() -> this method created a new array based on another array, it transforms the elements from the original array. example with .map we can x2 every number in an array, with map you can do something to every item in an array and creates anew array with the transformed data

.map takes a function as an argument, and that function executes for every element in the array

if they ask to "render a JSX block" they mean use "{}"




////////// Project Planning, Hooks, Managing State with useContext & useReducer, API Requests - Week 2 //////////




React Project Planning phases: Wireframes (Visualize/Design), Component Tree, Code Organization (VSCode-public/src/components), CSS Method, Check API (for necessary info), Make the app static for demonstration

We cannot pass props from Child to parent, only parent to child. so we can often pass down a function that receives a parameter, or we can pass down the "set" function

JSX has limitations, the most notable being you have to wrap JSX code in 1 large JSX element often a Declarative, you cant return more than one root element

Fragments render empty wrappers, they dont render any HTML element to the DOM

A modal is basically an overlay to an entire page meaning it should be over everything elements, dont use nested modals

We can use a portal to keep writing components normally but to still render it differently in the DOM. You can use createPortal() to portal or move a components HTML code somewhere else

A "ref" allows us to get access to other DOM elements and work with them, with refs we can set up a connection between HTML elements and other JS code

An Effect or (side)Effect is responsible for doing everything else besides rendering UI and react to user input. So it has the undercover work likr store data in storage, send HTTP requests to backend servers. All these tasks must happen outside of the normal component functions

useEffect is there to handle side effects

useEffect should only run when the conditions are met. A useEffect statement takes in 2 parameters, an arrow function & an array for the dependencies

one of the main uses of useEffect for us is for axios calls, or to check if info exists in the browser

React Context allows us to trigger an action in the component wide state storage and directly pass that to the component that is interested without building a long prop sending chain

Context is the app-wide state. React.createContext

Context is not a component but Context.provider is a component

useContext is the hook and you pass the context pointer you want to use -> const ctx = useContext(AuthContext);

hooks cannot be nested. They must all be called or used at the first level of the functions/components

a useRef is similar to useState in that in persists between renders in our component, but useRef does not cause our component to reupdate when it gets changed. the component will not re-render unlike useState

useRef also does not return 2 items in an array like useState does, it returns 1 object with a property of {current: 0}

useReducer returns an array like use state "const = []" and it takes to parameters inside the useReducer function. A reducer function that we perform on our state to get new state, and the other parameter will be an initial state value in an object "{ count: 0 }"

the returning array for useReducer will usually be "const = [state, dispatch]" dispatch being a function 

useContext is broken into 2 different sections, we have context.provider where we want to wrap all the code that needs access to the info in the context, and a single prop called "value" which is what the value of the context is

everything inside of provider has access to the value prop, useContext is used for passing down props all the way down into any of the children without having to manually pass all the props

A functional component is a normal JS function that can take in props as an argument, and it will render an element

A class component will use the class keyword, the class needs to extend from React.Component library, we essentially create a react component in a class, a class comes with a render function. render function returns the JSX as normal

